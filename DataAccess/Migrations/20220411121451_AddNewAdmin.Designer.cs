// <auto-generated />
using System;
using DataAccess;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace DataAccess.Migrations
{
    [DbContext(typeof(BlogManagementContext))]
    [Migration("20220411121451_AddNewAdmin")]
    partial class AddNewAdmin
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "3.1.23")
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("DataAccess.Domain.Cart", b =>
                {
                    b.Property<long>("CartId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("DateAdded")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("dateAdded")
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("Getdate()");

                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<bool>("IsPaid")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("isPaid")
                        .HasColumnType("bit")
                        .HasDefaultValue(false);

                    b.Property<long>("ProductId")
                        .HasColumnName("productId")
                        .HasColumnType("bigint");

                    b.Property<byte>("Quantity")
                        .HasColumnName("quantity")
                        .HasColumnType("tinyint");

                    b.HasKey("CartId");

                    b.HasIndex("Id")
                        .HasName("idx_cart_user_userId");

                    b.HasIndex("ProductId");

                    b.ToTable("[blog].[cart]");
                });

            modelBuilder.Entity("DataAccess.Domain.Category", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id")
                        .HasColumnType("bigint")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Content")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("content")
                        .HasColumnType("text")
                        .HasDefaultValue(null);

                    b.Property<bool>("IsDeleted")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("isDeleted")
                        .HasColumnType("bit")
                        .HasDefaultValue(false);

                    b.Property<string>("MetaTitle")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("metaTitle")
                        .HasColumnType("varchar (100)")
                        .HasMaxLength(100)
                        .HasDefaultValue(null);

                    b.Property<long?>("ParentId")
                        .HasColumnName("parentId")
                        .HasColumnType("bigint")
                        .HasDefaultValue(null);

                    b.Property<string>("Slug")
                        .IsRequired()
                        .HasColumnName("slug")
                        .HasColumnType("varchar (100)")
                        .HasMaxLength(100);

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnName("title")
                        .HasColumnType("varchar (75)")
                        .HasMaxLength(75);

                    b.HasKey("Id");

                    b.HasIndex("ParentId")
                        .HasName("idx_category_parent");

                    b.ToTable("[blog].[category]");
                });

            modelBuilder.Entity("DataAccess.Domain.Invoice", b =>
                {
                    b.Property<long>("InvoiceId")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("invoiceId")
                        .HasColumnType("bigint")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("PaidDate")
                        .HasColumnName("paidDate")
                        .HasColumnType("datetime");

                    b.Property<decimal>("TotalPrice")
                        .HasColumnName("totalPrice")
                        .HasColumnType("money");

                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("InvoiceId");

                    b.HasIndex("PaidDate")
                        .HasName("idx_Invoice_PaidDate");

                    b.HasIndex("UserId")
                        .HasName("idx_Invoice_UserId");

                    b.ToTable("[blog].[invoice]");
                });

            modelBuilder.Entity("DataAccess.Domain.InvoiceProduct", b =>
                {
                    b.Property<long>("InvoiceId")
                        .HasColumnName("invoiceId")
                        .HasColumnType("bigint");

                    b.Property<long>("ProductId")
                        .HasColumnName("productId")
                        .HasColumnType("bigint");

                    b.Property<decimal>("CurrentPice")
                        .HasColumnName("currentPice")
                        .HasColumnType("money");

                    b.Property<byte>("Quantity")
                        .HasColumnName("quantity")
                        .HasColumnType("tinyint");

                    b.HasKey("InvoiceId", "ProductId");

                    b.HasIndex("InvoiceId")
                        .HasName("idx_invoice_product_invoiceId");

                    b.HasIndex("ProductId")
                        .HasName("idx_invoice_product_productId");

                    b.ToTable("[blog].[invoice_product]");
                });

            modelBuilder.Entity("DataAccess.Domain.Post", b =>
                {
                    b.Property<long>("PostId")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("postId")
                        .HasColumnType("bigint")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Content")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("content")
                        .HasColumnType("text")
                        .HasDefaultValue(null);

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnName("createdAt")
                        .HasColumnType("datetime");

                    b.Property<bool>("IsDeleted")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("isDeleted")
                        .HasColumnType("bit")
                        .HasDefaultValue(false);

                    b.Property<bool>("IsVideoPost")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("isVideoPost")
                        .HasColumnType("bit")
                        .HasDefaultValue(false);

                    b.Property<string>("MetaTitle")
                        .HasColumnName("metaTitle")
                        .HasColumnType("varchar (100)")
                        .HasMaxLength(100);

                    b.Property<double?>("MinutesSpentForReading")
                        .HasColumnName("minutesSpentForReading")
                        .HasColumnType("float");

                    b.Property<long?>("ParentId")
                        .HasColumnName("parentId")
                        .HasColumnType("bigint")
                        .HasDefaultValue(null);

                    b.Property<bool>("Published")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("published")
                        .HasColumnType("bit")
                        .HasDefaultValue(true);

                    b.Property<DateTime?>("PublishedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("publishedAt")
                        .HasColumnType("datetime")
                        .HasDefaultValue(null);

                    b.Property<string>("Slug")
                        .IsRequired()
                        .HasColumnName("slug")
                        .HasColumnType("varchar (100)")
                        .HasMaxLength(100);

                    b.Property<string>("Summary")
                        .HasColumnName("summary")
                        .HasColumnType("varchar (255)")
                        .HasMaxLength(255)
                        .IsUnicode(true);

                    b.Property<byte[]>("Thumbnail")
                        .HasColumnName("thumbnail")
                        .HasColumnType("varbinary(max)");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnName("title")
                        .HasColumnType("varchar (75)")
                        .HasMaxLength(75);

                    b.Property<DateTime?>("UpdatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("updatedAt")
                        .HasColumnType("datetime")
                        .HasDefaultValue(null);

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnName("authorId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("PostId");

                    b.HasIndex("IsDeleted")
                        .HasName("idx_post_isDeleted");

                    b.HasIndex("ParentId")
                        .HasName("idx_post_parent");

                    b.HasIndex("Published")
                        .HasName("idx_post_published");

                    b.HasIndex("PublishedAt")
                        .HasName("idx_post_datepublish");

                    b.HasIndex("Slug")
                        .IsUnique()
                        .HasName("uq_slug");

                    b.HasIndex("Title")
                        .HasName("idx_post_title");

                    b.HasIndex("UserId")
                        .HasName("idx_post_user");

                    b.ToTable("[blog].[post]");
                });

            modelBuilder.Entity("DataAccess.Domain.PostCategory", b =>
                {
                    b.Property<long>("PostId")
                        .HasColumnName("postId")
                        .HasColumnType("bigint");

                    b.Property<long>("CategoryId")
                        .HasColumnName("categoryId")
                        .HasColumnType("bigint");

                    b.HasKey("PostId", "CategoryId");

                    b.HasIndex("CategoryId")
                        .HasName("idx_pc_category");

                    b.HasIndex("PostId")
                        .HasName("idx_pc_post");

                    b.ToTable("[blog].[post_category]");
                });

            modelBuilder.Entity("DataAccess.Domain.PostComment", b =>
                {
                    b.Property<long>("PostCommentId")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("postCommentId")
                        .HasColumnType("bigint")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Content")
                        .HasColumnName("content")
                        .HasColumnType("text");

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("createdAt")
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("GETDATE()");

                    b.Property<bool>("IsDeleted")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("isDeleted")
                        .HasColumnType("bit")
                        .HasDefaultValue(false);

                    b.Property<bool>("IsHidedByAdmin")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("isHidedByAdmin")
                        .HasColumnType("bit")
                        .HasDefaultValue(false);

                    b.Property<long?>("ParentId")
                        .HasColumnName("parentId")
                        .HasColumnType("bigint")
                        .HasDefaultValue(null);

                    b.Property<long>("PostId")
                        .HasColumnName("postId")
                        .HasColumnType("bigint");

                    b.Property<bool>("Published")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("published")
                        .HasColumnType("bit")
                        .HasDefaultValue(true);

                    b.Property<DateTime?>("PublishedAt")
                        .HasColumnName("publishAt")
                        .HasColumnType("datetime");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnName("title")
                        .HasColumnType("varchar (100)")
                        .HasMaxLength(100);

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("PostCommentId");

                    b.HasIndex("IsDeleted")
                        .HasName("idx_comment_isDeleted");

                    b.HasIndex("ParentId")
                        .HasName("idx_comment_parent");

                    b.HasIndex("PostId")
                        .HasName("idx_comment_post");

                    b.HasIndex("UserId");

                    b.ToTable("[blog].[post_comment]");
                });

            modelBuilder.Entity("DataAccess.Domain.PostMeta", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id")
                        .HasColumnType("bigint")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Content")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("content")
                        .HasColumnType("text")
                        .HasDefaultValue(null);

                    b.Property<string>("Key")
                        .IsRequired()
                        .HasColumnName("key")
                        .HasColumnType("varchar (50)")
                        .HasMaxLength(50);

                    b.Property<long>("PostId")
                        .HasColumnName("postId")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasIndex("PostId")
                        .HasName("idx_meta_post");

                    b.HasIndex("PostId", "Key")
                        .IsUnique()
                        .HasName("uq_post_meta");

                    b.ToTable("[blog].[post_meta]");
                });

            modelBuilder.Entity("DataAccess.Domain.PostTag", b =>
                {
                    b.Property<long>("PostId")
                        .HasColumnName("postId")
                        .HasColumnType("bigint");

                    b.Property<long>("TagId")
                        .HasColumnName("tagId")
                        .HasColumnType("bigint");

                    b.HasKey("PostId", "TagId");

                    b.HasIndex("PostId")
                        .HasName("idx_pt_post");

                    b.HasIndex("TagId")
                        .HasName("idx_pt_tag");

                    b.ToTable("[blog].[post_tag]");
                });

            modelBuilder.Entity("DataAccess.Domain.Product", b =>
                {
                    b.Property<long>("ProductId")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("productId")
                        .HasColumnType("bigint")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<bool>("IsDeleted")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("isDeleted")
                        .HasColumnType("bit")
                        .HasDefaultValue(false);

                    b.Property<decimal?>("OnSalePrice")
                        .HasColumnName("onSalePrice")
                        .HasColumnType("money");

                    b.Property<decimal>("Price")
                        .HasColumnName("price")
                        .HasColumnType("money");

                    b.Property<string>("ProductName")
                        .IsRequired()
                        .HasColumnName("productName")
                        .HasColumnType("nvarchar (150)");

                    b.Property<byte[]>("Thumbnail")
                        .HasColumnName("thumbnail")
                        .HasColumnType("varbinary(max)");

                    b.HasKey("ProductId");

                    b.HasIndex("IsDeleted")
                        .HasName("idx_product_isDeleted");

                    b.ToTable("[blog].[product]");
                });

            modelBuilder.Entity("DataAccess.Domain.Tag", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id")
                        .HasColumnType("bigint")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Content")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("content")
                        .HasColumnType("text")
                        .HasDefaultValue(null);

                    b.Property<bool>("IsDeleted")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("isDeleted")
                        .HasColumnType("bit")
                        .HasDefaultValue(false);

                    b.Property<string>("MetaTitle")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("metaTitle")
                        .HasColumnType("varchar (100)")
                        .HasMaxLength(100)
                        .HasDefaultValue(null);

                    b.Property<string>("Slug")
                        .IsRequired()
                        .HasColumnName("slug")
                        .HasColumnType("varchar (100)")
                        .HasMaxLength(100);

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnName("title")
                        .HasColumnType("varchar (75)")
                        .HasMaxLength(75);

                    b.HasKey("Id");

                    b.HasIndex("IsDeleted")
                        .HasName("idx_tag_isDeleted");

                    b.ToTable("[blog].[tag]");
                });

            modelBuilder.Entity("DataAccess.Domain.User", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("Avatar")
                        .HasColumnName("avatar")
                        .HasColumnType("text");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasColumnName("email")
                        .HasColumnType("varchar (50)")
                        .HasMaxLength(50);

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("FirstName")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("firstName")
                        .HasColumnType("varchar (50)")
                        .HasMaxLength(50)
                        .HasDefaultValue(null);

                    b.Property<string>("Intro")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("intro")
                        .HasColumnType("nvarchar (255)")
                        .HasMaxLength(255)
                        .HasDefaultValue(null);

                    b.Property<DateTime?>("LastLogin")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("lastLogin")
                        .HasColumnType("datetime")
                        .HasDefaultValue(null);

                    b.Property<string>("LastName")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("lastName")
                        .HasColumnType("varchar (50)")
                        .HasMaxLength(50)
                        .HasDefaultValue(null);

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("MiddleName")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("middleName")
                        .HasColumnType("varchar (50)")
                        .HasMaxLength(50)
                        .HasDefaultValue(null);

                    b.Property<string>("NormalizedEmail")
                        .HasColumnType("nvarchar(256)")
                        .HasMaxLength(256);

                    b.Property<string>("NormalizedUserName")
                        .HasColumnType("nvarchar(256)")
                        .HasMaxLength(256);

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(450)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("Profile")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("profile")
                        .HasColumnType("text")
                        .HasDefaultValue(null);

                    b.Property<DateTime>("RegisteredAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("registeredAt")
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("getdate()");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasColumnType("nvarchar(256)")
                        .HasMaxLength(256);

                    b.HasKey("Id");

                    b.HasIndex("Email")
                        .IsUnique()
                        .HasName("uq_email")
                        .HasFilter("[email] IS NOT NULL");

                    b.HasIndex("LockoutEnabled")
                        .HasName("idx_user_lock");

                    b.HasIndex("NormalizedEmail")
                        .HasName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.HasIndex("PhoneNumber")
                        .IsUnique()
                        .HasName("uq_mobile")
                        .HasFilter("[PhoneNumber] IS NOT NULL");

                    b.ToTable("AspNetUsers");

                    b.HasData(
                        new
                        {
                            Id = "408aa945-3d84-4421-8342-7269ec64d949",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "a8b98c4a-6a02-411f-bc00-2736ce399ccf",
                            Email = "admin@lc.com",
                            EmailConfirmed = true,
                            FirstName = "System",
                            LastName = "Admin",
                            LockoutEnabled = false,
                            NormalizedEmail = "ADMIN@LC.COM",
                            NormalizedUserName = "ADMIN@LC.COM",
                            PasswordHash = "AQAAAAEAACcQAAAAEGRP4GVoWEG8xmNmbFY1eIDW61GIPGRJ0+3CklON0Z9Bbx81sWiwLHXDmOZF7GEqnA==",
                            PhoneNumberConfirmed = false,
                            RegisteredAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            SecurityStamp = "5f4412b6-eaee-4916-a4cc-c4b62be9dfdc",
                            TwoFactorEnabled = false,
                            UserName = "admin"
                        },
                        new
                        {
                            Id = "3f4631bd-f907-4409-b416-ba356312e659",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "a96323cc-2812-4148-a2e8-c8cec2ec4306",
                            Email = "blogger@lc.com",
                            EmailConfirmed = true,
                            FirstName = "Blogger",
                            LastName = "First",
                            LockoutEnabled = false,
                            NormalizedEmail = "BLOGGER@LC.COM",
                            NormalizedUserName = "BLOGGER@LC.COM",
                            PasswordHash = "AQAAAAEAACcQAAAAED3Xt3+Pd5C2l7JUGpJLW09ORhbf65Mz6rP9h5jIsQ2ioda8pmWgotluBRhRwVOfQQ==",
                            PhoneNumberConfirmed = false,
                            RegisteredAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            SecurityStamp = "014ea835-0567-4074-b7ec-1674d938209e",
                            TwoFactorEnabled = false,
                            UserName = "blogger"
                        },
                        new
                        {
                            Id = "3f4631bd-f907-4409-b416-b3356312e659",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "4ee57e5e-cebf-4038-b9fe-fc734c9400ee",
                            Email = "antei.fa@gmail.com",
                            EmailConfirmed = true,
                            FirstName = "Admin",
                            LastName = "New",
                            LockoutEnabled = false,
                            NormalizedEmail = "antei.fa@gmail.com",
                            NormalizedUserName = "antei.fa@gmail.com",
                            PasswordHash = "AQAAAAEAACcQAAAAEB52E17h0/Dw8Tc+G3tvN+LeD5ablJv5BTu4Y3fov2OogTr0fqM3U+xWT+Scz3xYEA==",
                            PhoneNumberConfirmed = false,
                            RegisteredAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            SecurityStamp = "5a573308-e057-45a8-9975-d14fb422b554",
                            TwoFactorEnabled = false,
                            UserName = "antei"
                        });
                });

            modelBuilder.Entity("DataAccess.Domain.Vote", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnName("userId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<long>("PostId")
                        .HasColumnName("postId")
                        .HasColumnType("bigint");

                    b.Property<byte>("Rate")
                        .HasColumnName("rate")
                        .HasColumnType("tinyint");

                    b.HasKey("UserId", "PostId");

                    b.HasIndex("PostId")
                        .HasName("idx_vote_postId");

                    b.ToTable("[blog].[vote]");

                    b.HasCheckConstraint("check_vote_rate", "rate between 0 and 5");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(256)")
                        .HasMaxLength(256);

                    b.Property<string>("NormalizedName")
                        .HasColumnType("nvarchar(256)")
                        .HasMaxLength(256);

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles");

                    b.HasData(
                        new
                        {
                            Id = "cac43a6e-f7bb-4448-baaf-1add431ccbbf",
                            ConcurrencyStamp = "2aa5c2c9-5766-4797-9e94-b5ac932f92a2",
                            Name = "Administrator",
                            NormalizedName = "ADMINISTRATOR"
                        },
                        new
                        {
                            Id = "cac43a7e-f7cb-4148-baaf-1acb431eabbf",
                            ConcurrencyStamp = "fa649501-1061-4ec5-bb0b-3b3f3cdf2fee",
                            Name = "Blogger",
                            NormalizedName = "BLOGGER"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(128)")
                        .HasMaxLength(128);

                    b.Property<string>("ProviderKey")
                        .HasColumnType("nvarchar(128)")
                        .HasMaxLength(128);

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("RoleId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles");

                    b.HasData(
                        new
                        {
                            UserId = "408aa945-3d84-4421-8342-7269ec64d949",
                            RoleId = "cac43a6e-f7bb-4448-baaf-1add431ccbbf"
                        },
                        new
                        {
                            UserId = "3f4631bd-f907-4409-b416-ba356312e659",
                            RoleId = "cac43a7e-f7cb-4148-baaf-1acb431eabbf"
                        },
                        new
                        {
                            UserId = "3f4631bd-f907-4409-b416-b3356312e659",
                            RoleId = "cac43a6e-f7bb-4448-baaf-1add431ccbbf"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(128)")
                        .HasMaxLength(128);

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(128)")
                        .HasMaxLength(128);

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens");
                });

            modelBuilder.Entity("DataAccess.Domain.Cart", b =>
                {
                    b.HasOne("DataAccess.Domain.User", "User")
                        .WithMany("Carts")
                        .HasForeignKey("Id")
                        .HasConstraintName("fk_user_cart")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("DataAccess.Domain.Product", "Product")
                        .WithMany("Carts")
                        .HasForeignKey("ProductId")
                        .HasConstraintName("fk_product_cart")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();
                });

            modelBuilder.Entity("DataAccess.Domain.Category", b =>
                {
                    b.HasOne("DataAccess.Domain.Category", "ParentCategory")
                        .WithMany("ChildCategories")
                        .HasForeignKey("ParentId")
                        .HasConstraintName("fk_category_parent")
                        .OnDelete(DeleteBehavior.NoAction);
                });

            modelBuilder.Entity("DataAccess.Domain.Invoice", b =>
                {
                    b.HasOne("DataAccess.Domain.User", "User")
                        .WithMany("Invoices")
                        .HasForeignKey("UserId")
                        .HasConstraintName("pfk_User_Invoice")
                        .OnDelete(DeleteBehavior.NoAction);
                });

            modelBuilder.Entity("DataAccess.Domain.InvoiceProduct", b =>
                {
                    b.HasOne("DataAccess.Domain.Invoice", "Invoice")
                        .WithMany("InvoiceProducts")
                        .HasForeignKey("InvoiceId")
                        .HasConstraintName("fk_invoice_invoiceproduct")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("DataAccess.Domain.Product", "Product")
                        .WithMany("InvoiceProducts")
                        .HasForeignKey("ProductId")
                        .HasConstraintName("fk_product_invoiceproduct")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();
                });

            modelBuilder.Entity("DataAccess.Domain.Post", b =>
                {
                    b.HasOne("DataAccess.Domain.Post", "ParentPost")
                        .WithMany("ChildPosts")
                        .HasForeignKey("ParentId")
                        .HasConstraintName("fk_post_parent")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.HasOne("DataAccess.Domain.User", "User")
                        .WithMany("Posts")
                        .HasForeignKey("UserId")
                        .HasConstraintName("fk_post_user")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();
                });

            modelBuilder.Entity("DataAccess.Domain.PostCategory", b =>
                {
                    b.HasOne("DataAccess.Domain.Category", "Category")
                        .WithMany("PostCategories")
                        .HasForeignKey("CategoryId")
                        .HasConstraintName("fk_pc_category")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("DataAccess.Domain.Post", "Post")
                        .WithMany("PostCategories")
                        .HasForeignKey("PostId")
                        .HasConstraintName("fk_pc_post")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();
                });

            modelBuilder.Entity("DataAccess.Domain.PostComment", b =>
                {
                    b.HasOne("DataAccess.Domain.PostComment", "ParentPostComment")
                        .WithMany("ChildPostComments")
                        .HasForeignKey("ParentId")
                        .HasConstraintName("fk_comment_parent")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.HasOne("DataAccess.Domain.Post", "Post")
                        .WithMany("PostComments")
                        .HasForeignKey("PostId")
                        .HasConstraintName("fk_comment_post")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("DataAccess.Domain.User", "User")
                        .WithMany("Comments")
                        .HasForeignKey("UserId")
                        .HasConstraintName("fk_comment_user")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();
                });

            modelBuilder.Entity("DataAccess.Domain.PostMeta", b =>
                {
                    b.HasOne("DataAccess.Domain.Post", "Post")
                        .WithMany("PostMetas")
                        .HasForeignKey("PostId")
                        .HasConstraintName("fk_meta_post")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();
                });

            modelBuilder.Entity("DataAccess.Domain.PostTag", b =>
                {
                    b.HasOne("DataAccess.Domain.Post", "Post")
                        .WithMany("PostTags")
                        .HasForeignKey("PostId")
                        .HasConstraintName("fk_pt_post")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("DataAccess.Domain.Tag", "Tag")
                        .WithMany("PostTags")
                        .HasForeignKey("TagId")
                        .HasConstraintName("fk_pt_tag")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();
                });

            modelBuilder.Entity("DataAccess.Domain.Vote", b =>
                {
                    b.HasOne("DataAccess.Domain.Post", "Post")
                        .WithMany("Votes")
                        .HasForeignKey("PostId")
                        .HasConstraintName("fpk_vote_post")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("DataAccess.Domain.User", "User")
                        .WithMany("Votes")
                        .HasForeignKey("UserId")
                        .HasConstraintName("fpk_vote_user")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("DataAccess.Domain.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("DataAccess.Domain.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("DataAccess.Domain.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("DataAccess.Domain.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });
#pragma warning restore 612, 618
        }
    }
}
